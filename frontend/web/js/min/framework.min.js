var BaseController = Backbone.View.extend({

    elem: '.elem',

    initialize: function(){
        var that = this;

        $(window).on('document_ready', function() {
            that.setParams();
            that.preInit();
            that.init();
        });
    },

    preInit: function() { },
    init: function() { },

    setParams: function() { },

    getElem: function() {
        return $(this.elem);
    }

});
var BaseModel = Backbone.Model.extend({

    defaults: {

    },

    initialize: function(){
        var that = this;

        $(window).on('document_ready', function() { that.init(); });
    },

    init: function() {

    }

});
$(document).ready(function() {

    $.fn.removeClassRegExp = function (regexp) {
        if (regexp && (typeof regexp === 'string' || typeof regexp === 'object')) {
            regexp = typeof regexp === 'string' ? regexp = new RegExp(regexp) : regexp;

            $(this).each(function () {
                $(this).removeClass(function (i, c) {
                    var classes = [];
                    $.each(c.split(' '), function (i, c) {
                        if (regexp.test(c)) {
                            classes.push(c);
                        }
                    });
                    return classes.join(' ');
                });
            });
        }
        return this;
    };

    $.fn.isVisible = function () {
        var selector = $(this).eq(0);
        return (selector.is(':visible') && selector.css('visibility') !== 'hidden' && parseFloat(selector.css('opacity')) > 0);
    };

    $.fn.filterVisible = function () {
        var selector = $(this);
        var selector_result = [];
        selector.each(function(idx, jq){
            if ($(jq).is(':visible') && $(jq).css('visibility') !== 'hidden' && parseFloat($(jq).css('opacity')) > 0) {
                selector_result.push(jq);
            }
        });
        return $(selector_result);
    };

    $(window).trigger('document_ready');

});
var BasePagesController = BaseController.extend({

    preInit: function(){
        var that = this;

        // обработчики
        this.listenTo(router, 'change:prev_route', this.prevRouteChanged);
        this.listenTo(router, 'change:now', this.pageChanged);
        this.listenTo(router, 'change:params', this.paramsChanged);
    },

    updateViewContent: function(callback) {
        var that = this;
        var filename = that.getElem().attr('data-page');

        // if need to preload data from server
        if (!that.getElem().hasClass('b-page_no_load')) {

            that.getViewData(function(data) {
                that.getTemplate(filename, function(text) {
                    that.getElem().html(_.template(text, {
                        params: router.get('params'),
                        page: filename,
                        data: data,
                        header: _.template($('#header_template').html(), {}),
                        footer: _.template($('#footer_template').html(), {})
                    }));

                    if (typeof callback == 'function') { callback(); }
                });
            });

        } else {
            if (typeof callback == 'function') { callback(); }
        }
    },

    _template: '',
    getTemplate: function(filename, callback) {
        var that = this;

        if (that._template == '') {
            $.ajax({
                type: 'GET',
                url: '/js/views/' + filename + '.html',
                cache: false,
                timeout: 10000,
                success: function (text) {
                    that._template = text;

                    if (typeof callback == 'function') { callback(that._template); }
                }
            });
        } else {
            setTimeout(function(){
                if (typeof callback == 'function') { callback(that._template); }
            }, 50);
        }
    },

    prevRouteChanged: function() {
        if (this.getElem().attr('data-page') === router.get('old_now')) {
            this.getElem().attr('data-last-route', router.get('prev_route'));
        }
    },

    paramsChanged: function() {
        if (this.getElem().attr('data-page') === router.get('now')) {
            this.onParam(router.get('params'), (!router.get('page_showing') && this.getElem().html() != ''));
        }
    },

    // дополнительные данные для вьюхи
    getViewData: function(callback) {
        if (typeof callback == 'function') {
            callback({});
        }
    },

    // изменился параметр для этой страницы
    onParam: function(params, page_loaded) {},
    // закрылся попап и страница оказалась под ним
    onActivateAfterPopupClose: function(params) {},
    // открылся попап и страница оказалась под ним
    onDeactivateBeforePopupOpen: function(params) {},
    // изменился роут и это касается текущей страницы
    onRoute: function(params) {},

    // данные страницы загружены с сервера
    // load_in_background - страница загружена в фоне
    onAfterLoad: function(params, load_in_background) {},
    // страница показана на экране
    // show_in_background - страница показана в фоне
    onAfterShow: function(params, show_in_background) {},

    // изменился роут и страница сейчас будет скрываться
    onBeforeHide: function(params) {},
    // страница скрыта и данные удалены
    onAfterDestroy: function(params) {}

});


var PagesController = BasePagesController.extend({

    pageChanged: function(){
        var that = this;

        // изменился урл и это касается текущей вьюхи
        if (that.getElem().attr('data-page') === router.get('now')) {

            that.onRoute(router.get('params'));

            // вьюха не видна на экране
            if (!that.getElem().isVisible()) {

                // грузим ее
                that.updateViewContent(function () {
                    that.onAfterLoad(router.get('params'), false);

                    router.set('page_showing', true);

                    // и показываем
                    that.showPage(function () {
                        router.set('page_showing', false);
                        that.onAfterShow(router.get('params'), false);
                    });
                });
            }
            // вьюха видна на экране (возможно за попапом)
            else {
                setTimeout(function(){
                    that.onActivateAfterPopupClose(router.get('params'));
                }, 500);
            }
        }
        // изменился урл и это не наша вьюха
        else {
            if (that.getElem().isVisible()) {
                // но если та вьюха, которая изменилась - полноценная страница, а эта вьюха сейчас на экране - неплохо бы ее спрятать
                if ($('#wrap-'+router.get('now')).attr('data-page-type') === 'page') {
                    that.onBeforeHide(router.get('params'));
                    router.set('page_hiding', true);

                    that.hidePage(function(){
                        router.set('page_hiding', false);
                        that.onAfterDestroy(router.get('params'));
                    });
                }
                // если на фоне нашей вьюхи открылся попап - отсылаем ей событие
                else if ($('#wrap-'+router.get('now')).attr('data-page-type') === 'popup') {
                    that.onDeactivateBeforePopupOpen(router.get('params'));
                }
            }
        }
    },

    /*****************************************************************************************************************/

    beforeShow: function() {
        app.bgImgOnLoad();
        app.bgOnResize();
    },

    showPage: function(callback) {
        if ($('#wrap-preloader').hasClass('b-preloader_visible')) {
            this.showPageAfterPreloader(callback);
        } else {
            this.showPageNormal(callback);
        }
    },

    showPageAfterPreloader: function(callback) {
        var that = this;

        that.getElem().css({'opacity' : '', 'display' : '' });
        that.beforeShow();

        setTimeout(function(){
            that.afterShow(callback);
        }, 500);
    },

    showPageNormal: function(callback) {
        var that = this;
        var now = router.get('now') || '';
        var old_now = router.get('old_now') || '';
        var now_index = $('#wrap-' + now).index();
        var old_now_index = $('#wrap-' + old_now).index();

        var next_page_wrap_in = '';
        if (now_index > old_now_index) {
            that.getElem().css({ 'z-index' : 50, 'transform' : 'translate(0, 100%)', 'display' : '' });
            next_page_wrap_in = -100;
        } else {
            that.getElem().css({ 'z-index' : 50, 'transform' : 'translate(0, -100%)', 'display' : '' });
            next_page_wrap_in = 100;
        }

        that.beforeShow();

        app.animate($('.b-page_wrap_in'), { 'transform' : 'translate(0, '+next_page_wrap_in+'%)' }, 500, 'ease-in-out', 0, function() {
            that.afterShow(callback);
        });
    },

    afterShow: function(callback) {
        var that = this;

        setTimeout(function(){
            $('.b-page_wrap_in').css({ 'transform': '' });
            that.getElem().css({ 'opacity': '', 'z-index': '', position: '', 'transform': '' });

            if (typeof callback === 'function') { callback(); }
        }, 300);
    },

    /*****************************************************************************************************************/

    beforeHide: function() {

    },

    hidePage: function(callback) {
        var that = this;
        var now = router.get('now') || '';
        var old_now = router.get('old_now') || '';

        that.beforeHide();

        setTimeout(function(){
            that.afterHide(callback);
        }, 700);
    },

    afterHide: function(callback) {
        this.getElem().css({'z-index' : '', 'opacity' : '', position : '', 'display' : 'none' });
        if (!this.getElem().hasClass('b-page_no_load')) {
            this.getElem().html('');
        }

        if (typeof callback === 'function') { callback(); }
    }

});


var PopupController = BasePagesController.extend({

    parentPage: '',

    getParentPage: function() {
        if (this.parentPage != '') {
            return this.parentPage;
        } else {
            return indexPageController;
        }
    },

    pageChanged: function(){
        var that = this;

        // изменился урл и это касается текущей страницы
        if (that.getElem().attr('data-page') === router.get('now')) {

            that.onRoute(router.get('params'));

            // попап не виден на экране
            if (!that.getElem().isVisible()) {

                // или если сейчас нужно открыть попап, а у нас под ним ничего не лежит
                if ($('.b-page[data-page-type="page"]').filterVisible().length == 0) {

                    // грузим данные попапа
                    that.updateViewContent(function(){
                        that.onAfterLoad(router.get('params'), false);

                        router.set('page_showing', true);

                        // и показываем сам попап
                        that.showPage(function () {
                            router.set('page_showing', false);
                            that.onAfterShow(router.get('params'), false);
                        });

                        // открываем дефолтную страницу под попапом
                        that.getParentPage().updateViewContent(function () {
                            that.getParentPage().onAfterLoad(router.get('params'), true);
                            that.getParentPage().onDeactivateBeforePopupOpen(router.get('params'));

                            // показываем ее
                            that.getParentPage().showPage(function () {
                                that.getParentPage().onAfterShow(router.get('params'), true);
                            });
                        });
                    });
                }
                // все нормально, просто грузим попап
                else {
                    that.updateViewContent(function(){
                        that.onAfterLoad(router.get('params'), false);

                        router.set('page_showing', true);

                        // и показываем
                        that.showPage(function () {
                            router.set('page_showing', false);
                            that.onAfterShow(router.get('params'), false);
                        });
                    });
                }
            }
        }
        // изменился урл и это не наша вьюха
        else {
            // этот попап сейчас на экране - прячем его
            if (that.getElem().isVisible()) {
                that.onBeforeHide(router.get('params'));
                router.set('page_hiding', true);

                that.hidePage(function(){
                    router.set('page_hiding', false);
                    that.onAfterDestroy(router.get('params'));
                });
            }
        }
    },

    /*****************************************************************************************************************/

    beforeShow: function() {
        app.bgImgOnLoad();
        app.bgOnResize();
    },

    showPage: function(callback) {
        var that = this;

        that.getElem().css({'z-index' : 100, opacity: '0', display : '' });
        that.beforeShow();

        app.animate(that.getElem(), { opacity: '1' }, 500, '', 0, function() {
            that.afterShow(callback);
        });
    },

    afterShow: function(callback) {
        var that = this;
        that.getElem().css({'z-index' : '', 'opacity' : '' });

        if (typeof callback === 'function') { callback(); }
    },

    /*****************************************************************************************************************/

    beforeHide: function() {

    },

    hidePage: function(callback) {
        var that = this;

        that.beforeHide();

        app.animate(that.getElem(), { opacity: '0' }, 500, '', 0, function() {
            that.afterHide(callback);
        });
    },

    afterHide: function(callback) {
        this.getElem().css({'z-index' : '', 'opacity' : '', 'display' : 'none' });
        if (!this.getElem().hasClass('b-page_no_load')) {
            this.getElem().html('');
        }

        if (typeof callback === 'function') { callback(); }
    }

});

